import passport from 'passport';
import { Strategy as OAuth2Strategy } from 'passport-google-oauth2';
import Users from '../models/users.js';
/*first cycle: when user clicks login to google in frontend window.open(`${import.meta.env.VITE_API_BASE_URL}/auth/google/callback`,'self') this starts google auth page. OAuth2 is an authorization framework that we are using with passport allows third-party services (like Google) to share user information(profile) securely with websites or applications without exposing user credentials. Registration: Before using OAuth with Google, you typically need to register your application with Google's Developer Console to obtain a clientID and clientSecret.
Security: The callbackURL must be registered with Google in your OAuth credentials to prevent unauthorized redirects.*/
passport.use(new OAuth2Strategy({
    clientID: process.env.GOOGLE_AUTH_CLIENT_ID,
    clientSecret: process.env.GOOGLE_AUTH_CLIENT_SECRET,
    /*User is redirected to Google's authentication page where they are asked to log in (if not already logged in) and grant permissions to your application to access their Google profile information (profile and email). */
    scope: ['profile', 'email'],
    /*User grants permissions for your application to access their Google profile information.Google redirects the user back to your application's specified callback URL The callbackURL is a URL endpoint in your application where the OAuth provider (Google) will redirect the user after they have authenticated. we set this same path in google developer console used to create auth account. in server http://localhost:4000/auth/google/callback .send to server url and server gets user profile */
    callbackURL: '/auth/google/callback',
    
},
/* first cycle continues: This function handles the incoming data from Google after successful authentication.callback function (accessToken, refreshToken, profile, done) handles the user's authentication and profile/data retrieval It leverages the tokens (accessToken and refreshToken) to interact securely with Google APIs and utilizes the profile data to create or retrieve user records in your application's database. accessToken, refreshToken, are generated by google once user logs in using google account. users are directed towards your app. using these tokens users in your app can use google services or API like google map, google drive etc. here we are not using these tokens*/
async (accessToken, refreshToken, profile, done) => {

    try {
        // First, find if a user with the same Google ID exists
        let user = await Users.findOne({ googleId: profile.id, authProvider: 'google' });
        
        if (user) {
            // If the user already exists, return the user
            return done(null, user);
                                  } 
             else {
                // If no user exists, create a new one
                const newUser = new Users({
                    googleId: profile.id,
                    name: profile.displayName,
                    email: profile.emails[0].value,
                    photo: profile.photos[0].value,
                    authProvider: 'google',
                });
                await newUser.save();
                done(null, newUser);
            }
        }
     catch (error) {
        done(error);
    }
}));
// done just convention to name callback in passport can name anything
/*Determines which data of the user object should be stored in the session. It typically stores only the user's MongoDB ObjectId (_id). When a user logs in and authentication is successful, Passport calls serializeUser.
Your serializeUser function decides what data to store in the session. Typically, it stores minimal information necessary to uniquely identify the user. Commonly, this is the user's database id (like MongoDB ObjectId).*/
passport.serializeUser((user, done) => {
    
    done(null, user.id);
});

/*Retrieves the user's full data from the database based on the user ID stored in the session. These functions are crucial for maintaining persistent login sessions using Passport.js with Node.js applications. They ensure that once a user logs in, their session can be managed efficiently, allowing subsequent requests to be authenticated without requiring the user to log in again.  deserializeUser uses the user ID that was stored in the session by serializeUser*/
passport.deserializeUser(async (id, done) => {
    
    try {
        const user = await Users.findById(id);
        done(null, user);
    } catch (error) {
        done(error);
    }
});

// initialize google auth login
/*second cycle: authentication done but to show that it is complete it uses app.use session, passport from index.js. cycle endsa. In Passport middleware, the callback function is handled internally by Passport based on the strategy (google in this case) and the configuration (successRedirect and failureRedirect options). Passport manages the authentication flow, redirects, and calls your callback function (done) internally in the OAuth2 strategy. so no call back here.
Usage of done():
The done() function provided in the OAuth2 strategy's callback (async (accessToken, refreshToken, profile, done) => { ... }) is crucial. It's used to signal Passport when the authentication process is complete, passing either an error or the authenticated user (user). This allows Passport to manage the session and continue the request lifecycle accordingly. */
export const googleAuth = passport.authenticate('google', { scope: ['profile', 'email'] });

export const googleAuthCallback = passport.authenticate('google', {
            successRedirect: (`${process.env.FRONTEND_URL}/google-login-success`),
            failureRedirect: (`${process.env.FRONTEND_URL}/login)`)
        });

// get user data after login success
/* when user logs in with google sucessfully app.use(session in index generates a session till which user remains logged in and from frontend we send axios request with withCredentials: true which means user is logged in and now it's data is available in this function in req.user. if not loged in req.user here shows undefined */
export const userInfo = (req, res) => {
    

    /* req.user is a Mongoose document which includes methods and other metadata. The .toObject() method converts this document into a plain JavaScript object, stripping away Mongoose-specific properties and methods, making it easier to work with the data. JavaScript object destructuring allows you to extract properties from an object and assign them to variables. In this case, itâ€™s used to extract the password field from the userObject. The rest syntax ... is used to collect the remaining properties of the object into a new object. Here, ...sanitizedUser collects all the properties of userObject except for password. now hashed password will not be send to browser. */
    const { password, ...sanitizedUser } = req.user.toObject();
    if(req.user) {
        
        res.status(200).json({success: true, message: "successfully logged in", user: sanitizedUser})
    }
    else {
        res.status(400).json({success: false, message: "Not Authorized"})
    }
}



export const googleLogout = (req, res, next) => {
    
    req.logout((err) => {
      if (err) {
        return res.status(500).json({ error: 'Failed to log out' });
      }
  
      req.session = null;
      res.clearCookie('connect.sid');
      res.send({
        success: true,
        /* In Passport.js, req.isAuthenticated() is a method available on the request object. It returns a boolean indicating whether the current request is authenticated. it confimrs user is logged out or not and sends this message to frontend. if logged out req.isAuthenticated() is false or true */
        isAuth: req.isAuthenticated()
      })})}

  

export default passport;